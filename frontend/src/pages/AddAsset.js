import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Save, ArrowLeft, Package, Building2, MapPin, Plus, Trash2, User, Wrench, Hash } from 'lucide-react';
import apiService from '../services/apiService';
import SearchableDropdown from '../components/SearchableDropdown';
import ConfirmationModal from '../components/ConfirmationModal';

const AddAsset = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(false);
  
  // Modal states
  const [showCreateConfirmation, setShowCreateConfirmation] = useState(false);
  const [showCancelConfirmation, setShowCancelConfirmation] = useState(false);
  
  // State tracking for intelligent error handling
  const [userHasInteracted, setUserHasInteracted] = useState(false);
  const [projectSearchError, setProjectSearchError] = useState(null);
  
  // Auto-populated project data
  const [projectData, setProjectData] = useState({
    project_reference_num: '',
    customer_name: '',
    customer_reference_number: '',
    project_title: ''
  });
  
  // Dropdowns data
  const [availableProjects, setAvailableProjects] = useState([]);
  const [filteredProjects, setFilteredProjects] = useState([]);
  const [projectSearchTerm, setProjectSearchTerm] = useState('');
  const [showProjectDropdown, setShowProjectDropdown] = useState(false);
  const [branches, setBranches] = useState([]);
  const [recipients, setRecipients] = useState([]);
  
  // Form data
  const [selectedBranch, setSelectedBranch] = useState('');
  
  // Main asset form data
  const [asset, setAsset] = useState({
    serial_number: '',
    tag_id: '',
    item_name: '',
    category: '',
    model: '',
    status: 'Active',
    recipient_name: '',
    department_name: ''
  });

  // Peripheral data
  const [peripherals, setPeripherals] = useState([{
    peripheral_name: '',
    serial_code_name: '',
    condition: 'Good',
    remarks: ''
  }]);

  // Auto-generated fields (read-only)
  const [autoGenerated, setAutoGenerated] = useState({
    asset_id: 'Will be auto-generated',
    pmid: 'Will be auto-generated',
    inventory_id: 'Will be auto-generated'
  });

  // Fetch initial data on mount
  useEffect(() => {
    fetchAvailableProjects();
    fetchRecipients();
  }, []);

  // Filter projects based on search term
  useEffect(() => {
    if (projectSearchTerm.trim() === '') {
      setFilteredProjects(availableProjects);
    } else {
      const filtered = availableProjects.filter(project => 
        project.Project_Ref_Number.toLowerCase().includes(projectSearchTerm.toLowerCase()) ||
        project.Project_Title.toLowerCase().includes(projectSearchTerm.toLowerCase()) ||
        project.Customer_Name?.toLowerCase().includes(projectSearchTerm.toLowerCase())
      );
      setFilteredProjects(filtered);
    }
  }, [projectSearchTerm, availableProjects]);

  // Auto-populate project data when project reference number changes
  useEffect(() => {
    if (projectData.project_reference_num.trim()) {
      fetchProjectByReference(projectData.project_reference_num);
    } else {
      // Clear dependent data when project ref is cleared
      setBranches([]);
      setSelectedBranch('');
      setProjectData(prev => ({
        ...prev,
        customer_name: '',
        customer_reference_number: '',
        project_title: ''
      }));
    }
  }, [projectData.project_reference_num]);

  // Fetch branches when customer name is populated
  useEffect(() => {
    if (projectData.customer_name) {
      fetchBranchesByCustomer(projectData.customer_name);
    }
  }, [projectData.customer_name]);

  const fetchAvailableProjects = async () => {
    try {
      setLoading(true);
      const response = await apiService.getAllProjects();
      console.log('Available projects:', response);
      
      // Handle both paginated and direct array responses
      const projects = response.data || response || [];
      setAvailableProjects(projects);
      setFilteredProjects(projects);
      setProjectSearchError(null); // Clear search-specific errors
    } catch (err) {
      console.error('Error fetching available projects:', err);
      
      // Only set error if user has actually interacted with the search
      if (userHasInteracted) {
        setProjectSearchError('Failed to load available projects');
      }
      
      // Set mock data as fallback (always available)
      const mockProjects = [
        {
          Project_ID: 1,
          Project_Ref_Number: 'QT240000000015729',
          Project_Title: 'PERKHIDMATAN SEWAAN PERKAKASAN ICT,PENYELENGGARAAN KOMPREHENSIF DAN BANTUAN SOKONGAN BAGI TEMPOH 37 BULAN DI AGENSI PENGURUSAN BENCANA NEGARA (NADMA)',
          Customer_Name: 'NADMA'
        },
        {
          Project_ID: 6,
          Project_Ref_Number: 'QT240000000029575',
          Project_Title: 'PERKHIDMATAN SEWAAN PERALATAN ICT DI INSTITUT LATIHAN ISLAM MALAYSIA (ILIM)',
          Customer_Name: 'ILIM'
        }
      ];
      setAvailableProjects(mockProjects);
      setFilteredProjects(mockProjects);
    } finally {
      setLoading(false);
    }
  };

  const fetchProjectByReference = async (projectRefNum) => {
    try {
      console.log('🔄 Fetching project by reference:', projectRefNum);
      setLoading(true);
      const response = await apiService.getProjectByReference(projectRefNum);
      console.log('✅ Project response received:', response);
      
      if (response.data) {
        setProjectData(prev => ({
          ...prev,
          customer_name: response.data.customer_name,
          customer_reference_number: response.data.customer_reference_number,
          project_title: response.data.project_title
        }));
        console.log('✅ Project data populated:', response.data);
        setError(null);
        
        // Automatically fetch branches when customer is found
        if (response.data.customer_name) {
          console.log('🔄 Auto-fetching branches for customer:', response.data.customer_name);
          await fetchBranchesByCustomer(response.data.customer_name);
        }
      } else {
        console.warn('⚠️ No project found for reference:', projectRefNum);
        setError(`No project found with reference number "${projectRefNum}"`);
      }
    } catch (err) {
      console.error('❌ Error fetching project:', err);
      console.error('❌ Error details:', {
        message: err.message,
        stack: err.stack,
        projectRefNum
      });
      setError(`Failed to load project "${projectRefNum}". ${err.message || 'Please check the reference number and try again.'}`);
      // Clear dependent fields
      setProjectData(prev => ({
        ...prev,
        customer_name: '',
        customer_reference_number: '',
        project_title: ''
      }));
      setBranches([]);
    } finally {
      setLoading(false);
    }
  };

  const fetchBranchesByCustomer = async (customerName) => {
    try {
      console.log('🔄 Fetching branches for customer:', customerName);
      setLoading(true);
      
      const response = await apiService.getBranchesByCustomer(customerName);
      console.log('✅ Branch response received:', response);
      
      const branches = response.data || [];
      setBranches(branches);
      
      if (branches.length === 0) {
        console.warn('⚠️ No branches found for customer:', customerName);
        
        // Provide fallback branches if none found
        const fallbackBranches = [
          {
            Customer_ID: 'temp_1',
            Customer_Ref_Number: 'TEMP-001',
            Customer_Name: customerName,
            Branch: 'Head Office'
          },
          {
            Customer_ID: 'temp_2',
            Customer_Ref_Number: 'TEMP-002',
            Customer_Name: customerName,
            Branch: 'Branch Office'
          }
        ];
        
        setBranches(fallbackBranches);
        setError(`Using default branches for "${customerName}". No specific branches found in database.`);
        
        console.log('📋 Using fallback branches:', fallbackBranches);
      } else {
        console.log(`✅ Found ${branches.length} branches for ${customerName}`);
        setError(null); // Clear any previous errors
      }
      
    } catch (err) {
      console.error('❌ Error fetching branches:', err);
      console.error('❌ Error details:', {
        message: err.message,
        stack: err.stack,
        customerName
      });
      
      // Provide fallback branches on error
      const fallbackBranches = [
        {
          Customer_ID: 'fallback_1',
          Customer_Ref_Number: 'FB-001',
          Customer_Name: customerName,
          Branch: 'Main Office'
        },
        {
          Customer_ID: 'fallback_2',
          Customer_Ref_Number: 'FB-002',
          Customer_Name: customerName,
          Branch: 'Secondary Office'
        }
      ];
      
      setBranches(fallbackBranches);
      setError(`Branch loading failed for "${customerName}". Using default options. (${err.message || 'Network error'})`);
      
      console.log('📋 Using fallback branches due to error:', fallbackBranches);
    } finally {
      setLoading(false);
    }
  };



  const fetchRecipients = async () => {
    try {
      const response = await apiService.getRecipients();
      setRecipients(response.data || []);
    } catch (err) {
      console.error('Error fetching recipients:', err);
      setRecipients([]);
    }
  };

  const handleSubmitClick = (e) => {
    e.preventDefault();
    
    // Validate form before showing confirmation
    if (!projectData.project_reference_num.trim()) {
      setError('Please enter a project reference number');
      return;
    }
    
    if (!selectedBranch) {
      setError('Please select a branch');
      return;
    }
    
    if (!asset.serial_number.trim() || !asset.tag_id.trim() || !asset.item_name.trim()) {
      setError('Please fill in all required asset fields');
      return;
    }

    // Validate peripheral data
    const peripheralErrors = validatePeripherals();
    if (peripheralErrors.length > 0) {
      setError(`Peripheral validation errors:\n${peripheralErrors.join('\n')}`);
      return;
    }
    
    // Clear any previous errors and show confirmation
    setError(null);
    setShowCreateConfirmation(true);
  };

  const handleConfirmCreate = async () => {
    setLoading(true);
    setError(null);
    
    try {
      // Prepare complete asset data
      const completeAssetData = {
        // Project and customer info
        project_reference_num: projectData.project_reference_num,
        customer_name: projectData.customer_name,
        customer_reference_number: projectData.customer_reference_number,
        branch: selectedBranch,
        
        // Asset info
        serial_number: asset.serial_number,
        tag_id: asset.tag_id,
        item_name: asset.item_name,
        category: asset.category,
        model: asset.model,
        status: asset.status,
        recipient_name: asset.recipient_name,
        department_name: asset.department_name,
        
        // Include only valid peripherals (those with both name and serial code)
        peripherals: peripherals.filter(p => p.peripheral_name.trim() && p.serial_code_name.trim())
      };
      
      console.log('Submitting asset data:', completeAssetData);
      
      const response = await apiService.createAssetWithDetails(completeAssetData);
      console.log('Asset created successfully:', response);
      
      if (response.success) {
        setAutoGenerated({
          asset_id: response.data.asset_id,
          pmid: response.data.pmid,
          inventory_id: response.data.inventory_id
        });
        setSuccess(true);
        setShowCreateConfirmation(false);
        setTimeout(() => {
          navigate('/assets');
        }, 2000);
      } else {
        setError(response.message || 'Failed to create asset');
        setLoading(false);
        setShowCreateConfirmation(false);
      }
      
    } catch (err) {
      console.error('Error creating asset:', err);
      setError(err.message || 'Failed to create asset');
      setLoading(false);
      setShowCreateConfirmation(false);
    }
  };

  const handleCancelClick = () => {
    setShowCancelConfirmation(true);
  };

  const handleConfirmCancel = () => {
    navigate('/assets');
  };

  const handleAssetChange = (e) => {
    setAsset({ ...asset, [e.target.name]: e.target.value });
  };

  const handleProjectRefChange = (e) => {
    const value = e.target.value;
    
    // Mark that user has interacted with the field
    if (!userHasInteracted && value.length > 0) {
      setUserHasInteracted(true);
    }
    
    setProjectSearchTerm(value);
    setProjectData({ ...projectData, project_reference_num: value });
    setShowProjectDropdown(value.length > 0);
    
    // Clear previous search errors when user types
    if (projectSearchError && value.length > 0) {
      setProjectSearchError(null);
    }
  };

  const handleProjectSelect = (project) => {
    setUserHasInteracted(true); // User has interacted by selecting
    setProjectSearchError(null); // Clear any errors
    
    setProjectData({
      ...projectData,
      project_reference_num: project.Project_Ref_Number,
      customer_name: project.Customer_Name || '',
      customer_reference_number: project.Customer_Ref_Number || '',
      project_title: project.Project_Title || ''
    });
    setProjectSearchTerm(project.Project_Ref_Number);
    setShowProjectDropdown(false);
    
    // Trigger branch fetching if customer name is available
    if (project.Customer_Name) {
      fetchBranchesByCustomer(project.Customer_Name);
    }
  };

  const handleProjectInputFocus = () => {
    setUserHasInteracted(true); // Mark interaction when user focuses
    setShowProjectDropdown(true);
  };

  const handleProjectInputBlur = () => {
    // Delay hiding dropdown to allow for clicks
    setTimeout(() => setShowProjectDropdown(false), 200);
  };

  // Helper function to check if a peripheral form is complete
  const isPeripheralComplete = (peripheral) => {
    return peripheral.peripheral_name.trim() !== '' && peripheral.serial_code_name.trim() !== '';
  };

  // Helper function to check if we can add a new peripheral
  const canAddNewPeripheral = () => {
    if (peripherals.length === 0) return true;
    const lastPeripheral = peripherals[peripherals.length - 1];
    return isPeripheralComplete(lastPeripheral);
  };

  // Enhanced peripheral validation for submission
  const validatePeripherals = () => {
    const errors = [];
    peripherals.forEach((peripheral, index) => {
      if (peripheral.peripheral_name.trim() && !peripheral.serial_code_name.trim()) {
        errors.push(`Peripheral ${index + 1}: Serial code is required when peripheral name is provided`);
      }
    });
    return errors;
  };

  const handlePeripheralChange = (index, field, value) => {
    const updatedPeripherals = [...peripherals];
    updatedPeripherals[index][field] = value;
    setPeripherals(updatedPeripherals);
  };

  const addPeripheral = () => {
    // Only allow adding if current peripheral forms are complete
    if (canAddNewPeripheral()) {
      setPeripherals([...peripherals, {
        peripheral_name: '',
        serial_code_name: '',
        condition: 'Good',
        remarks: ''
      }]);
    }
  };

  const removePeripheral = (index) => {
    if (peripherals.length > 1) {
      const updatedPeripherals = peripherals.filter((_, i) => i !== index);
      setPeripherals(updatedPeripherals);
    }
  };

  if (success) {
    return (
      <div style={{ textAlign: 'center', padding: '40px' }}>
        <div style={{ 
          backgroundColor: '#d4edda', 
          color: '#155724', 
          padding: '20px', 
          borderRadius: '8px',
          maxWidth: '500px',
          margin: '0 auto'
        }}>
          <h2>✅ Asset Created Successfully!</h2>
          <p>Asset ID: {autoGenerated.asset_id}</p>
          <p>PMID: {autoGenerated.pmid}</p>
          <p>Inventory ID: {autoGenerated.inventory_id}</p>
          <p>Redirecting to assets page...</p>
        </div>
      </div>
    );
  }

  return (
    <div>
      <style jsx>{`
        .dropdown-container {
          position: relative;
          z-index: 1000;
        }
        
        .dropdown-menu {
          position: absolute;
          top: 100%;
          left: 0;
          right: 0;
          background: white;
          border: 1px solid #ddd;
          border-radius: 8px;
          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
          max-height: 250px;
          overflow-y: auto;
          z-index: 1001;
          margin-top: 4px;
        }
        
        .dropdown-item {
          padding: 12px 16px;
          border-bottom: 1px solid #f0f0f0;
          cursor: pointer;
          transition: background-color 0.2s ease;
        }
        
        .dropdown-item:hover {
          background-color: #f8f9fa !important;
        }
        
        .dropdown-item:last-child {
          border-bottom: none;
        }
        
        .dropdown-ref-number {
          font-weight: 600;
          color: #333;
          margin-bottom: 4px;
        }
        
        .dropdown-title {
          font-size: 14px;
          color: #666;
          margin-bottom: 2px;
        }
        
        .dropdown-customer {
          font-size: 12px;
          color: #888;
        }
      `}</style>
      
      <div style={{ display: 'flex', alignItems: 'center', marginBottom: '20px' }}>
        <button onClick={() => navigate('/assets')} className="btn btn-secondary" style={{ marginRight: '15px' }}>
          <ArrowLeft size={16} />
        </button>
        <h1>Add New Asset</h1>
      </div>

      {error && (
        <div style={{ 
          backgroundColor: '#f8d7da', 
          color: '#721c24', 
          padding: '15px', 
          borderRadius: '8px',
          marginBottom: '20px'
        }}>
          ⚠️ {error}
        </div>
      )}

      {projectSearchError && userHasInteracted && (
        <div style={{ 
          backgroundColor: '#fff3cd', 
          color: '#856404', 
          padding: '12px', 
          borderRadius: '6px',
          marginBottom: '15px',
          border: '1px solid #ffeaa7'
        }}>
          ⚠️ {projectSearchError}
        </div>
      )}

      <div className="card">
        <form onSubmit={handleSubmitClick}>
          
          {/* Project Reference Section */}
          <div style={{ 
            backgroundColor: '#e8f5e8', 
            padding: '20px', 
            borderRadius: '8px', 
            marginBottom: '25px',
            border: '2px solid #4caf50'
          }}>
            <h3 style={{ 
              color: '#2e7d32', 
              marginBottom: '15px', 
              display: 'flex', 
              alignItems: 'center', 
              gap: '10px' 
            }}>
              <Hash size={20} />
              Step 1: Project Reference Number
            </h3>
            
            <div className="form-group">
              <label>Current Project Reference Number *</label>
              <div className="dropdown-container">
                <input
                  type="text"
                  value={projectSearchTerm}
                  onChange={handleProjectRefChange}
                  onFocus={handleProjectInputFocus}
                  onBlur={handleProjectInputBlur}
                  placeholder="Start typing project reference number..."
                  required
                  style={{ fontSize: '16px', fontWeight: 'bold', width: '100%' }}
                  autoComplete="off"
                />
                
                {showProjectDropdown && filteredProjects.length > 0 && (
                  <div className="dropdown-menu">
                    {filteredProjects.map((project, index) => (
                      <div
                        key={index}
                        className="dropdown-item"
                        onClick={() => handleProjectSelect(project)}
                      >
                        <div className="dropdown-ref-number">
                          {project.Project_Ref_Number}
                        </div>
                        <div className="dropdown-title">
                          {project.Project_Title}
                        </div>
                        <div className="dropdown-customer">
                          Customer: {project.Customer_Name}
                        </div>
                      </div>
                    ))}
                  </div>
                )}
                
                {showProjectDropdown && projectSearchTerm.length > 0 && filteredProjects.length === 0 && (
                  <div className="dropdown-menu">
                    <div style={{ padding: '12px', fontSize: '14px', color: '#666' }}>
                      No projects found matching "{projectSearchTerm}"
                    </div>
                  </div>
                )}
              </div>
              <small style={{ color: '#666', display: 'block', marginTop: '5px' }}>
                Start typing to see available projects, or enter the exact project reference number
              </small>
            </div>

            {/* Auto-populated Project Data (Read-only) */}
            {projectData.customer_name && (
              <div style={{ 
                backgroundColor: '#f0f8f0', 
                padding: '15px', 
                borderRadius: '6px', 
                marginTop: '15px',
                border: '1px solid #c8e6c9'
              }}>
                <h4 style={{ color: '#2e7d32', marginBottom: '10px' }}>Project Information:</h4>
                <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '15px' }}>
                  <div>
                    <label style={{ fontWeight: 'bold', color: '#555' }}>Customer Name:</label>
                    <div style={{ padding: '8px', backgroundColor: '#fff', border: '1px solid #ddd', borderRadius: '4px' }}>
                      {projectData.customer_name}
                    </div>
                  </div>
                  <div>
                    <label style={{ fontWeight: 'bold', color: '#555' }}>Customer Reference:</label>
                    <div style={{ padding: '8px', backgroundColor: '#fff', border: '1px solid #ddd', borderRadius: '4px' }}>
                      {projectData.customer_reference_number}
                    </div>
                  </div>
                </div>
                {projectData.project_title && (
                  <div style={{ marginTop: '10px' }}>
                    <label style={{ fontWeight: 'bold', color: '#555' }}>Project Title:</label>
                    <div style={{ padding: '8px', backgroundColor: '#fff', border: '1px solid #ddd', borderRadius: '4px' }}>
                      {projectData.project_title}
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>

          {/* Branch Selection Section */}
          {projectData.customer_name && (
            <div style={{ 
              backgroundColor: '#e3f2fd', 
              padding: '20px', 
              borderRadius: '8px', 
              marginBottom: '25px',
              border: '2px solid #2196f3'
            }}>
              <h3 style={{ 
                color: '#1976d2', 
                marginBottom: '15px', 
                display: 'flex', 
                alignItems: 'center', 
                gap: '10px' 
              }}>
                <MapPin size={20} />
                Step 2: Branch Selection
              </h3>
              
              <div className="form-group">
                <label>Select Branch *</label>
                
                {loading ? (
                  <div style={{ 
                    padding: '10px', 
                    backgroundColor: '#f5f5f5', 
                    border: '1px solid #ddd', 
                    borderRadius: '4px',
                    textAlign: 'center',
                    color: '#666'
                  }}>
                    🔄 Loading branches...
                  </div>
                ) : (
                  <select 
                    value={selectedBranch} 
                    onChange={(e) => setSelectedBranch(e.target.value)}
                    required
                    disabled={!projectData.customer_name || loading}
                    style={{ 
                      backgroundColor: !projectData.customer_name ? '#f5f5f5' : 'white',
                      opacity: !projectData.customer_name ? 0.7 : 1
                    }}
                  >
                    <option value="">
                      {branches.length === 0 
                        ? 'No branches available' 
                        : 'Select Branch'
                      }
                    </option>
                    {branches.map((branch, index) => (
                      <option key={index} value={branch.Branch}>
                        {branch.Branch}
                        {branch.Customer_ID && branch.Customer_ID.toString().startsWith('temp_') && ' (Default)'}
                        {branch.Customer_ID && branch.Customer_ID.toString().startsWith('fallback_') && ' (Fallback)'}
                      </option>
                    ))}
                  </select>
                )}
                
                {!projectData.customer_name && (
                  <small style={{ color: '#666', fontSize: '12px' }}>
                    Customer name must be populated first
                  </small>
                )}
                
                {branches.length > 0 && (
                  <small style={{ color: '#666', fontSize: '12px', display: 'block', marginTop: '5px' }}>
                    Found {branches.length} branch{branches.length !== 1 ? 'es' : ''} for {projectData.customer_name}
                  </small>
                )}
              </div>
            </div>
          )}

          {/* User-Provided Asset Data Section */}
          {selectedBranch && (
            <div style={{ 
              backgroundColor: '#f3e5f5', 
              padding: '20px', 
              borderRadius: '8px', 
              marginBottom: '25px',
              border: '2px solid #9c27b0'
            }}>
              <h3 style={{ 
                color: '#7b1fa2', 
                marginBottom: '15px', 
                display: 'flex', 
                alignItems: 'center', 
                gap: '10px' 
              }}>
                <Package size={20} />
                Step 3: Asset Information
              </h3>
              
              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '20px' }}>
                <div className="form-group">
                  <label>Serial Number *</label>
                  <input
                    type="text"
                    name="serial_number"
                    value={asset.serial_number}
                    onChange={handleAssetChange}
                    placeholder="e.g., 78HT574"
                    required
                  />
                </div>

                <div className="form-group">
                  <label>Tag ID *</label>
                  <input
                    type="text"
                    name="tag_id"
                    value={asset.tag_id}
                    onChange={handleAssetChange}
                    placeholder="e.g., NADMA-A25001"
                    required
                  />
                </div>

                <div className="form-group">
                  <label>Item Name *</label>
                  <input
                    type="text"
                    name="item_name"
                    value={asset.item_name}
                    onChange={handleAssetChange}
                    placeholder="e.g., Komputer Meja (All-in-One)"
                    required
                  />
                </div>

                <div className="form-group">
                  <label>Status</label>
                  <select name="status" value={asset.status} onChange={handleAssetChange}>
                    <option value="Active">Active</option>
                    <option value="Inactive">Inactive</option>
                    <option value="Maintenance">Maintenance</option>
                    <option value="Retired">Retired</option>
                  </select>
                </div>

                <div className="form-group">
                  <label>
                    Category <span style={{ color: '#f44336' }}>*</span>
                  </label>
                  <input
                    type="text"
                    value={asset.category}
                    onChange={(e) => setAsset({ ...asset, category: e.target.value })}
                    placeholder="Enter category (e.g., Desktop, Laptop, Server)"
                    required
                  />
                </div>

                <div className="form-group">
                  <label>
                    Model <span style={{ color: '#f44336' }}>*</span>
                  </label>
                  <input
                    type="text"
                    value={asset.model}
                    onChange={(e) => setAsset({ ...asset, model: e.target.value })}
                    placeholder="Enter model (e.g., Dell OptiPlex 7420, HP M480f)"
                    required
                  />
                </div>
              </div>
            </div>
          )}

          {/* Recipient Information Section */}
          {selectedBranch && (
            <div style={{ 
              backgroundColor: '#fff3e0', 
              padding: '20px', 
              borderRadius: '8px', 
              marginBottom: '25px',
              border: '2px solid #ff9800'
            }}>
              <h3 style={{ 
                color: '#f57c00', 
                marginBottom: '15px', 
                display: 'flex', 
                alignItems: 'center', 
                gap: '10px' 
              }}>
                <User size={20} />
                Step 4: Recipient Information
              </h3>
              
              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '20px' }}>
                <div className="form-group">
                  <label>Recipient Name *</label>
                  <input
                    type="text"
                    name="recipient_name"
                    value={asset.recipient_name}
                    onChange={handleAssetChange}
                    placeholder="e.g., Insp Abdullah bin Ahmad Sobri"
                    required
                  />
                </div>

                <div className="form-group">
                  <label>Department Name *</label>
                  <input
                    type="text"
                    name="department_name"
                    value={asset.department_name}
                    onChange={handleAssetChange}
                    placeholder="e.g., Ketua SHU C (ETK) Ajutan"
                    required
                  />
                </div>
              </div>
            </div>
          )}

          {/* Peripheral Section */}
          {selectedBranch && (
            <div style={{ 
              backgroundColor: '#e0f2f1', 
              padding: '20px', 
              borderRadius: '8px', 
              marginBottom: '25px',
              border: '2px solid #009688'
            }}>
              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '15px' }}>
                <h3 style={{ 
                  color: '#00695c', 
                  margin: 0,
                  display: 'flex', 
                  alignItems: 'center', 
                  gap: '10px' 
                }}>
                  <Wrench size={20} />
                  Step 5: Peripherals (Optional)
                </h3>
                <button 
                  type="button" 
                  onClick={addPeripheral} 
                  className={`btn ${canAddNewPeripheral() ? 'btn-secondary' : 'btn-disabled'}`}
                  disabled={!canAddNewPeripheral()}
                  style={{ 
                    padding: '8px 12px', 
                    fontSize: '14px',
                    opacity: canAddNewPeripheral() ? 1 : 0.5,
                    cursor: canAddNewPeripheral() ? 'pointer' : 'not-allowed'
                  }}
                  title={!canAddNewPeripheral() ? 'Complete the current peripheral form before adding another' : 'Add a new peripheral'}
                >
                  <Plus size={14} style={{ marginRight: '5px' }} />
                  Add Peripheral
                </button>
              </div>

              {!canAddNewPeripheral() && peripherals.length > 0 && (
                <div style={{
                  backgroundColor: '#fff3cd',
                  color: '#856404',
                  padding: '8px 12px',
                  borderRadius: '4px',
                  fontSize: '12px',
                  marginBottom: '15px',
                  border: '1px solid #ffeaa7'
                }}>
                  💡 Complete the current peripheral form (name and serial code required) before adding another
                </div>
              )}
              
              {peripherals.map((peripheral, index) => (
                <div key={index} style={{ 
                  backgroundColor: '#f0f8f0', 
                  padding: '15px', 
                  borderRadius: '6px', 
                  marginBottom: '15px',
                  border: '1px solid #b2dfdb'
                }}>
                  <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '10px' }}>
                    <h4 style={{ color: '#00695c', margin: 0 }}>Peripheral {index + 1}</h4>
                    {peripherals.length > 1 && (
                      <button 
                        type="button" 
                        onClick={() => removePeripheral(index)}
                        style={{ 
                          background: 'none', 
                          border: 'none', 
                          color: '#f44336', 
                          cursor: 'pointer',
                          padding: '5px'
                        }}
                      >
                        <Trash2 size={16} />
                      </button>
                    )}
                  </div>
                  
                  <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '15px' }}>
                    <div className="form-group" style={{ marginBottom: '10px' }}>
                      <label>
                        Peripheral Name
                        {peripheral.peripheral_name.trim() !== '' && <span style={{ color: '#4caf50' }}> ✓</span>}
                      </label>
                      <input
                        type="text"
                        value={peripheral.peripheral_name}
                        onChange={(e) => handlePeripheralChange(index, 'peripheral_name', e.target.value)}
                        placeholder="Enter peripheral type (e.g., Keyboard, Mouse, Monitor)"
                        className={peripheral.peripheral_name.trim() && !peripheral.serial_code_name.trim() ? 'peripheral-warning' : ''}
                      />
                    </div>

                    <div className="form-group" style={{ marginBottom: '10px' }}>
                      <label>
                        Serial Code
                        {peripheral.peripheral_name.trim() !== '' && (
                          <span style={{ color: '#f44336' }}> * (Required)</span>
                        )}
                        {peripheral.serial_code_name.trim() !== '' && <span style={{ color: '#4caf50' }}> ✓</span>}
                      </label>
                      <input
                        type="text"
                        value={peripheral.serial_code_name}
                        onChange={(e) => handlePeripheralChange(index, 'serial_code_name', e.target.value)}
                        placeholder="e.g., CN-GE90-9865"
                        style={{
                          borderColor: peripheral.peripheral_name.trim() && !peripheral.serial_code_name.trim() ? '#ff9800' : ''
                        }}
                      />
                      {peripheral.peripheral_name.trim() && !peripheral.serial_code_name.trim() && (
                        <small style={{ color: '#ff9800', fontSize: '11px', display: 'block', marginTop: '2px' }}>
                          Serial code is required when peripheral name is selected
                        </small>
                      )}
                    </div>

                    <div className="form-group" style={{ marginBottom: '10px' }}>
                      <label>Condition</label>
                      <select 
                        value={peripheral.condition} 
                        onChange={(e) => handlePeripheralChange(index, 'condition', e.target.value)}
                      >
                        <option value="Good">Good</option>
                        <option value="Fair">Fair</option>
                        <option value="Poor">Poor</option>
                        <option value="Needs Repair">Needs Repair</option>
                      </select>
                    </div>

                    <div className="form-group" style={{ marginBottom: '10px' }}>
                      <label>Remarks</label>
                      <input
                        type="text"
                        value={peripheral.remarks}
                        onChange={(e) => handlePeripheralChange(index, 'remarks', e.target.value)}
                        placeholder="Optional remarks"
                      />
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}



          <div style={{ display: 'flex', gap: '10px', marginTop: '20px' }}>
            <button 
              type="submit" 
              className="btn btn-primary"
              disabled={loading || !selectedBranch}
              style={{ 
                padding: '12px 24px',
                fontSize: '16px',
                fontWeight: 'bold'
              }}
            >
              <Save size={16} style={{ marginRight: '8px' }} />
              {loading ? 'Creating Asset...' : 'Create Asset'}
            </button>
            <button 
              type="button" 
              onClick={handleCancelClick}
              className="btn btn-secondary"
              disabled={loading}
              style={{ 
                padding: '12px 24px',
                fontSize: '16px'
              }}
            >
              Cancel
            </button>
          </div>
        </form>
      </div>

      {/* Create Asset Confirmation Modal */}
      <ConfirmationModal
        isOpen={showCreateConfirmation}
        onClose={() => setShowCreateConfirmation(false)}
        onConfirm={handleConfirmCreate}
        title="Create New Asset"
        message="Are you sure you want to create this new asset? Please review the information below before confirming."
        confirmText="Create Asset"
        cancelText="Review"
        type="success"
        showSummary={true}
        summaryData={{
          projectRef: projectData.project_reference_num,
          customer: projectData.customer_name,
          branch: selectedBranch,
          serialNumber: asset.serial_number,
          tagId: asset.tag_id,
          itemName: asset.item_name,
          category: asset.category,
          model: asset.model,
          peripheralCount: peripherals.filter(p => p.peripheral_name.trim() && p.serial_code_name.trim()).length
        }}
        loading={loading}
      />

      {/* Cancel Confirmation Modal */}
      <ConfirmationModal
        isOpen={showCancelConfirmation}
        onClose={() => setShowCancelConfirmation(false)}
        onConfirm={handleConfirmCancel}
        title="Cancel Asset Creation"
        message="Are you sure you want to cancel? All entered data will be lost and cannot be recovered."
        confirmText="Yes, Cancel"
        cancelText="Continue Editing"
        type="danger"
      />
    </div>
  );
};

export default AddAsset;